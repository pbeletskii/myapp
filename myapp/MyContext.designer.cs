#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace myapp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TravelAgency")]
	public partial class MyContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertOffice(Office instance);
    partial void UpdateOffice(Office instance);
    partial void DeleteOffice(Office instance);
    partial void InsertPassenger(Passenger instance);
    partial void UpdatePassenger(Passenger instance);
    partial void DeletePassenger(Passenger instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertTour(Tour instance);
    partial void UpdateTour(Tour instance);
    partial void DeleteTour(Tour instance);
    partial void InsertTaken_Tour(Taken_Tour instance);
    partial void UpdateTaken_Tour(Taken_Tour instance);
    partial void DeleteTaken_Tour(Taken_Tour instance);
    partial void InsertAvailable_Tour(Available_Tour instance);
    partial void UpdateAvailable_Tour(Available_Tour instance);
    partial void DeleteAvailable_Tour(Available_Tour instance);
    partial void InsertDelayofTour(DelayofTour instance);
    partial void UpdateDelayofTour(DelayofTour instance);
    partial void DeleteDelayofTour(DelayofTour instance);
    #endregion
		
		public MyContextDataContext() : 
				base(global::myapp.Properties.Settings.Default.TravelAgencyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Office> Offices
		{
			get
			{
				return this.GetTable<Office>();
			}
		}
		
		public System.Data.Linq.Table<Passenger> Passengers
		{
			get
			{
				return this.GetTable<Passenger>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Tour> Tours
		{
			get
			{
				return this.GetTable<Tour>();
			}
		}
		
		public System.Data.Linq.Table<Taken_Tour> Taken_Tours
		{
			get
			{
				return this.GetTable<Taken_Tour>();
			}
		}
		
		public System.Data.Linq.Table<Available_Tour> Available_Tours
		{
			get
			{
				return this.GetTable<Available_Tour>();
			}
		}
		
		public System.Data.Linq.Table<DelayofTour> DelayofTours
		{
			get
			{
				return this.GetTable<DelayofTour>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CityID;
		
		private string _CityName;
		
		private EntitySet<Office> _Offices;
		
		private EntitySet<Available_Tour> _Available_Tours;
		
		private EntitySet<Available_Tour> _Available_Tours1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(string value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    #endregion
		
		public City()
		{
			this._Offices = new EntitySet<Office>(new Action<Office>(this.attach_Offices), new Action<Office>(this.detach_Offices));
			this._Available_Tours = new EntitySet<Available_Tour>(new Action<Available_Tour>(this.attach_Available_Tours), new Action<Available_Tour>(this.detach_Available_Tours));
			this._Available_Tours1 = new EntitySet<Available_Tour>(new Action<Available_Tour>(this.attach_Available_Tours1), new Action<Available_Tour>(this.detach_Available_Tours1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="VarChar(10)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Office", Storage="_Offices", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Office> Offices
		{
			get
			{
				return this._Offices;
			}
			set
			{
				this._Offices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Available_Tour", Storage="_Available_Tours", ThisKey="CityID", OtherKey="DestinationCityID")]
		public EntitySet<Available_Tour> Available_Tours
		{
			get
			{
				return this._Available_Tours;
			}
			set
			{
				this._Available_Tours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Available_Tour1", Storage="_Available_Tours1", ThisKey="CityID", OtherKey="SourceCityID")]
		public EntitySet<Available_Tour> Available_Tours1
		{
			get
			{
				return this._Available_Tours1;
			}
			set
			{
				this._Available_Tours1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Available_Tours(Available_Tour entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Available_Tours(Available_Tour entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Available_Tours1(Available_Tour entity)
		{
			this.SendPropertyChanging();
			entity.City1 = this;
		}
		
		private void detach_Available_Tours1(Available_Tour entity)
		{
			this.SendPropertyChanging();
			entity.City1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offices")]
	public partial class Office : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OfficeID;
		
		private string _Address;
		
		private string _CityID;
		
		private string _MobileNumber;
		
		private string _OfficeNumber;
		
		private string _FaxNumber;
		
		private string _WhatsappNumber;
		
		private string _Email;
		
		private string _WorkHours;
		
		private string _Name;
		
		private EntitySet<Staff> _Staffs;
		
		private EntitySet<Available_Tour> _Available_Tours;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfficeIDChanging(string value);
    partial void OnOfficeIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityIDChanging(string value);
    partial void OnCityIDChanged();
    partial void OnMobileNumberChanging(string value);
    partial void OnMobileNumberChanged();
    partial void OnOfficeNumberChanging(string value);
    partial void OnOfficeNumberChanged();
    partial void OnFaxNumberChanging(string value);
    partial void OnFaxNumberChanged();
    partial void OnWhatsappNumberChanging(string value);
    partial void OnWhatsappNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWorkHoursChanging(string value);
    partial void OnWorkHoursChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Office()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._Available_Tours = new EntitySet<Available_Tour>(new Action<Available_Tour>(this.attach_Available_Tours), new Action<Available_Tour>(this.detach_Available_Tours));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeID", DbType="Char(7) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OfficeID
		{
			get
			{
				return this._OfficeID;
			}
			set
			{
				if ((this._OfficeID != value))
				{
					this.OnOfficeIDChanging(value);
					this.SendPropertyChanging();
					this._OfficeID = value;
					this.SendPropertyChanged("OfficeID");
					this.OnOfficeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(30)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Char(5)")]
		public string CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="VarChar(11)")]
		public string MobileNumber
		{
			get
			{
				return this._MobileNumber;
			}
			set
			{
				if ((this._MobileNumber != value))
				{
					this.OnMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._MobileNumber = value;
					this.SendPropertyChanged("MobileNumber");
					this.OnMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeNumber", DbType="VarChar(11)")]
		public string OfficeNumber
		{
			get
			{
				return this._OfficeNumber;
			}
			set
			{
				if ((this._OfficeNumber != value))
				{
					this.OnOfficeNumberChanging(value);
					this.SendPropertyChanging();
					this._OfficeNumber = value;
					this.SendPropertyChanged("OfficeNumber");
					this.OnOfficeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaxNumber", DbType="VarChar(11)")]
		public string FaxNumber
		{
			get
			{
				return this._FaxNumber;
			}
			set
			{
				if ((this._FaxNumber != value))
				{
					this.OnFaxNumberChanging(value);
					this.SendPropertyChanging();
					this._FaxNumber = value;
					this.SendPropertyChanged("FaxNumber");
					this.OnFaxNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhatsappNumber", DbType="VarChar(11)")]
		public string WhatsappNumber
		{
			get
			{
				return this._WhatsappNumber;
			}
			set
			{
				if ((this._WhatsappNumber != value))
				{
					this.OnWhatsappNumberChanging(value);
					this.SendPropertyChanging();
					this._WhatsappNumber = value;
					this.SendPropertyChanged("WhatsappNumber");
					this.OnWhatsappNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkHours", DbType="VarChar(30)")]
		public string WorkHours
		{
			get
			{
				return this._WorkHours;
			}
			set
			{
				if ((this._WorkHours != value))
				{
					this.OnWorkHoursChanging(value);
					this.SendPropertyChanging();
					this._WorkHours = value;
					this.SendPropertyChanged("WorkHours");
					this.OnWorkHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Office_Staff", Storage="_Staffs", ThisKey="OfficeID", OtherKey="OfficeID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Office_Available_Tour", Storage="_Available_Tours", ThisKey="OfficeID", OtherKey="OfficeID")]
		public EntitySet<Available_Tour> Available_Tours
		{
			get
			{
				return this._Available_Tours;
			}
			set
			{
				this._Available_Tours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Office", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Offices.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Offices.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(string);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Office = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Office = null;
		}
		
		private void attach_Available_Tours(Available_Tour entity)
		{
			this.SendPropertyChanging();
			entity.Office = this;
		}
		
		private void detach_Available_Tours(Available_Tour entity)
		{
			this.SendPropertyChanging();
			entity.Office = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Passenger")]
	public partial class Passenger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _PassengerID;
		
		private string _MobileNumber;
		
		private string _HomeNumber;
		
		private System.Nullable<int> _NumOfTakenTours;
		
		private EntitySet<Taken_Tour> _Taken_Tours;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPassengerIDChanging(string value);
    partial void OnPassengerIDChanged();
    partial void OnMobileNumberChanging(string value);
    partial void OnMobileNumberChanged();
    partial void OnHomeNumberChanging(string value);
    partial void OnHomeNumberChanged();
    partial void OnNumOfTakenToursChanging(System.Nullable<int> value);
    partial void OnNumOfTakenToursChanged();
    #endregion
		
		public Passenger()
		{
			this._Taken_Tours = new EntitySet<Taken_Tour>(new Action<Taken_Tour>(this.attach_Taken_Tours), new Action<Taken_Tour>(this.detach_Taken_Tours));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassengerID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PassengerID
		{
			get
			{
				return this._PassengerID;
			}
			set
			{
				if ((this._PassengerID != value))
				{
					this.OnPassengerIDChanging(value);
					this.SendPropertyChanging();
					this._PassengerID = value;
					this.SendPropertyChanged("PassengerID");
					this.OnPassengerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="VarChar(11)")]
		public string MobileNumber
		{
			get
			{
				return this._MobileNumber;
			}
			set
			{
				if ((this._MobileNumber != value))
				{
					this.OnMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._MobileNumber = value;
					this.SendPropertyChanged("MobileNumber");
					this.OnMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeNumber", DbType="VarChar(11)")]
		public string HomeNumber
		{
			get
			{
				return this._HomeNumber;
			}
			set
			{
				if ((this._HomeNumber != value))
				{
					this.OnHomeNumberChanging(value);
					this.SendPropertyChanging();
					this._HomeNumber = value;
					this.SendPropertyChanged("HomeNumber");
					this.OnHomeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfTakenTours", DbType="Int")]
		public System.Nullable<int> NumOfTakenTours
		{
			get
			{
				return this._NumOfTakenTours;
			}
			set
			{
				if ((this._NumOfTakenTours != value))
				{
					this.OnNumOfTakenToursChanging(value);
					this.SendPropertyChanging();
					this._NumOfTakenTours = value;
					this.SendPropertyChanged("NumOfTakenTours");
					this.OnNumOfTakenToursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Taken_Tour", Storage="_Taken_Tours", ThisKey="PassengerID", OtherKey="PassengerID")]
		public EntitySet<Taken_Tour> Taken_Tours
		{
			get
			{
				return this._Taken_Tours;
			}
			set
			{
				this._Taken_Tours.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Taken_Tours(Taken_Tour entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = this;
		}
		
		private void detach_Taken_Tours(Taken_Tour entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _StaffID;
		
		private string _OfficeID;
		
		private string _MobileNumber;
		
		private string _HomeNumber;
		
		private System.Nullable<decimal> _Salary;
		
		private string _Gender;
		
		private EntityRef<Office> _Office;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnOfficeIDChanging(string value);
    partial void OnOfficeIDChanged();
    partial void OnMobileNumberChanging(string value);
    partial void OnMobileNumberChanged();
    partial void OnHomeNumberChanging(string value);
    partial void OnHomeNumberChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public Staff()
		{
			this._Office = default(EntityRef<Office>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeID", DbType="Char(7)")]
		public string OfficeID
		{
			get
			{
				return this._OfficeID;
			}
			set
			{
				if ((this._OfficeID != value))
				{
					if (this._Office.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfficeIDChanging(value);
					this.SendPropertyChanging();
					this._OfficeID = value;
					this.SendPropertyChanged("OfficeID");
					this.OnOfficeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNumber", DbType="VarChar(11)")]
		public string MobileNumber
		{
			get
			{
				return this._MobileNumber;
			}
			set
			{
				if ((this._MobileNumber != value))
				{
					this.OnMobileNumberChanging(value);
					this.SendPropertyChanging();
					this._MobileNumber = value;
					this.SendPropertyChanged("MobileNumber");
					this.OnMobileNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeNumber", DbType="VarChar(11)")]
		public string HomeNumber
		{
			get
			{
				return this._HomeNumber;
			}
			set
			{
				if ((this._HomeNumber != value))
				{
					this.OnHomeNumberChanging(value);
					this.SendPropertyChanging();
					this._HomeNumber = value;
					this.SendPropertyChanged("HomeNumber");
					this.OnHomeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Money")]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(6)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Office_Staff", Storage="_Office", ThisKey="OfficeID", OtherKey="OfficeID", IsForeignKey=true)]
		public Office Office
		{
			get
			{
				return this._Office.Entity;
			}
			set
			{
				Office previousValue = this._Office.Entity;
				if (((previousValue != value) 
							|| (this._Office.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Office.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Office.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._OfficeID = value.OfficeID;
					}
					else
					{
						this._OfficeID = default(string);
					}
					this.SendPropertyChanged("Office");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tours")]
	public partial class Tour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TourType;
		
		private string _Name;
		
		private string _Number;
		
		private EntitySet<Available_Tour> _Available_Tours;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourTypeChanging(string value);
    partial void OnTourTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    #endregion
		
		public Tour()
		{
			this._Available_Tours = new EntitySet<Available_Tour>(new Action<Available_Tour>(this.attach_Available_Tours), new Action<Available_Tour>(this.detach_Available_Tours));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourType", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TourType
		{
			get
			{
				return this._TourType;
			}
			set
			{
				if ((this._TourType != value))
				{
					this.OnTourTypeChanging(value);
					this.SendPropertyChanging();
					this._TourType = value;
					this.SendPropertyChanged("TourType");
					this.OnTourTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(15)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tour_Available_Tour", Storage="_Available_Tours", ThisKey="Number,TourType", OtherKey="Number,TourType")]
		public EntitySet<Available_Tour> Available_Tours
		{
			get
			{
				return this._Available_Tours;
			}
			set
			{
				this._Available_Tours.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Available_Tours(Available_Tour entity)
		{
			this.SendPropertyChanging();
			entity.Tour = this;
		}
		
		private void detach_Available_Tours(Available_Tour entity)
		{
			this.SendPropertyChanging();
			entity.Tour = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Taken_Tours")]
	public partial class Taken_Tour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PassengerID;
		
		private string _TourID;
		
		private EntityRef<Passenger> _Passenger;
		
		private EntityRef<Available_Tour> _Available_Tour;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPassengerIDChanging(string value);
    partial void OnPassengerIDChanged();
    partial void OnTourIDChanging(string value);
    partial void OnTourIDChanged();
    #endregion
		
		public Taken_Tour()
		{
			this._Passenger = default(EntityRef<Passenger>);
			this._Available_Tour = default(EntityRef<Available_Tour>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassengerID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PassengerID
		{
			get
			{
				return this._PassengerID;
			}
			set
			{
				if ((this._PassengerID != value))
				{
					if (this._Passenger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassengerIDChanging(value);
					this.SendPropertyChanging();
					this._PassengerID = value;
					this.SendPropertyChanged("PassengerID");
					this.OnPassengerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TourID
		{
			get
			{
				return this._TourID;
			}
			set
			{
				if ((this._TourID != value))
				{
					if (this._Available_Tour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourIDChanging(value);
					this.SendPropertyChanging();
					this._TourID = value;
					this.SendPropertyChanged("TourID");
					this.OnTourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Taken_Tour", Storage="_Passenger", ThisKey="PassengerID", OtherKey="PassengerID", IsForeignKey=true)]
		public Passenger Passenger
		{
			get
			{
				return this._Passenger.Entity;
			}
			set
			{
				Passenger previousValue = this._Passenger.Entity;
				if (((previousValue != value) 
							|| (this._Passenger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Passenger.Entity = null;
						previousValue.Taken_Tours.Remove(this);
					}
					this._Passenger.Entity = value;
					if ((value != null))
					{
						value.Taken_Tours.Add(this);
						this._PassengerID = value.PassengerID;
					}
					else
					{
						this._PassengerID = default(string);
					}
					this.SendPropertyChanged("Passenger");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Available_Tour_Taken_Tour", Storage="_Available_Tour", ThisKey="TourID", OtherKey="TourID", IsForeignKey=true)]
		public Available_Tour Available_Tour
		{
			get
			{
				return this._Available_Tour.Entity;
			}
			set
			{
				Available_Tour previousValue = this._Available_Tour.Entity;
				if (((previousValue != value) 
							|| (this._Available_Tour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Available_Tour.Entity = null;
						previousValue.Taken_Tours.Remove(this);
					}
					this._Available_Tour.Entity = value;
					if ((value != null))
					{
						value.Taken_Tours.Add(this);
						this._TourID = value.TourID;
					}
					else
					{
						this._TourID = default(string);
					}
					this.SendPropertyChanged("Available_Tour");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Available_Tours")]
	public partial class Available_Tour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TourID;
		
		private string _TourType;
		
		private string _Number;
		
		private System.Nullable<System.DateTime> _Going;
		
		private System.Nullable<System.DateTime> _CommingBack;
		
		private string _SourceCityID;
		
		private string _DestinationCityID;
		
		private string _Accomodation;
		
		private string _Breakfast;
		
		private string _Lunch;
		
		private string _Dinner;
		
		private System.Nullable<decimal> _Cost;
		
		private string _OfficeID;
		
		private EntitySet<Taken_Tour> _Taken_Tours;
		
		private EntityRef<DelayofTour> _DelayofTour;
		
		private EntityRef<City> _City;
		
		private EntityRef<Office> _Office;
		
		private EntityRef<City> _City1;
		
		private EntityRef<Tour> _Tour;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourIDChanging(string value);
    partial void OnTourIDChanged();
    partial void OnTourTypeChanging(string value);
    partial void OnTourTypeChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnGoingChanging(System.Nullable<System.DateTime> value);
    partial void OnGoingChanged();
    partial void OnCommingBackChanging(System.Nullable<System.DateTime> value);
    partial void OnCommingBackChanged();
    partial void OnSourceCityIDChanging(string value);
    partial void OnSourceCityIDChanged();
    partial void OnDestinationCityIDChanging(string value);
    partial void OnDestinationCityIDChanged();
    partial void OnAccomodationChanging(string value);
    partial void OnAccomodationChanged();
    partial void OnBreakfastChanging(string value);
    partial void OnBreakfastChanged();
    partial void OnLunchChanging(string value);
    partial void OnLunchChanged();
    partial void OnDinnerChanging(string value);
    partial void OnDinnerChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnOfficeIDChanging(string value);
    partial void OnOfficeIDChanged();
    #endregion
		
		public Available_Tour()
		{
			this._Taken_Tours = new EntitySet<Taken_Tour>(new Action<Taken_Tour>(this.attach_Taken_Tours), new Action<Taken_Tour>(this.detach_Taken_Tours));
			this._DelayofTour = default(EntityRef<DelayofTour>);
			this._City = default(EntityRef<City>);
			this._Office = default(EntityRef<Office>);
			this._City1 = default(EntityRef<City>);
			this._Tour = default(EntityRef<Tour>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TourID
		{
			get
			{
				return this._TourID;
			}
			set
			{
				if ((this._TourID != value))
				{
					this.OnTourIDChanging(value);
					this.SendPropertyChanging();
					this._TourID = value;
					this.SendPropertyChanged("TourID");
					this.OnTourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourType", DbType="VarChar(6)")]
		public string TourType
		{
			get
			{
				return this._TourType;
			}
			set
			{
				if ((this._TourType != value))
				{
					if (this._Tour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourTypeChanging(value);
					this.SendPropertyChanging();
					this._TourType = value;
					this.SendPropertyChanged("TourType");
					this.OnTourTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="VarChar(15)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					if (this._Tour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Going", DbType="DateTime")]
		public System.Nullable<System.DateTime> Going
		{
			get
			{
				return this._Going;
			}
			set
			{
				if ((this._Going != value))
				{
					this.OnGoingChanging(value);
					this.SendPropertyChanging();
					this._Going = value;
					this.SendPropertyChanged("Going");
					this.OnGoingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommingBack", DbType="DateTime")]
		public System.Nullable<System.DateTime> CommingBack
		{
			get
			{
				return this._CommingBack;
			}
			set
			{
				if ((this._CommingBack != value))
				{
					this.OnCommingBackChanging(value);
					this.SendPropertyChanging();
					this._CommingBack = value;
					this.SendPropertyChanged("CommingBack");
					this.OnCommingBackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceCityID", DbType="Char(5)")]
		public string SourceCityID
		{
			get
			{
				return this._SourceCityID;
			}
			set
			{
				if ((this._SourceCityID != value))
				{
					if (this._City1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceCityIDChanging(value);
					this.SendPropertyChanging();
					this._SourceCityID = value;
					this.SendPropertyChanged("SourceCityID");
					this.OnSourceCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationCityID", DbType="Char(5)")]
		public string DestinationCityID
		{
			get
			{
				return this._DestinationCityID;
			}
			set
			{
				if ((this._DestinationCityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationCityIDChanging(value);
					this.SendPropertyChanging();
					this._DestinationCityID = value;
					this.SendPropertyChanged("DestinationCityID");
					this.OnDestinationCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accomodation", DbType="VarChar(30)")]
		public string Accomodation
		{
			get
			{
				return this._Accomodation;
			}
			set
			{
				if ((this._Accomodation != value))
				{
					this.OnAccomodationChanging(value);
					this.SendPropertyChanging();
					this._Accomodation = value;
					this.SendPropertyChanged("Accomodation");
					this.OnAccomodationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Breakfast", DbType="VarChar(3)")]
		public string Breakfast
		{
			get
			{
				return this._Breakfast;
			}
			set
			{
				if ((this._Breakfast != value))
				{
					this.OnBreakfastChanging(value);
					this.SendPropertyChanging();
					this._Breakfast = value;
					this.SendPropertyChanged("Breakfast");
					this.OnBreakfastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lunch", DbType="VarChar(3)")]
		public string Lunch
		{
			get
			{
				return this._Lunch;
			}
			set
			{
				if ((this._Lunch != value))
				{
					this.OnLunchChanging(value);
					this.SendPropertyChanging();
					this._Lunch = value;
					this.SendPropertyChanged("Lunch");
					this.OnLunchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dinner", DbType="VarChar(3)")]
		public string Dinner
		{
			get
			{
				return this._Dinner;
			}
			set
			{
				if ((this._Dinner != value))
				{
					this.OnDinnerChanging(value);
					this.SendPropertyChanging();
					this._Dinner = value;
					this.SendPropertyChanged("Dinner");
					this.OnDinnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeID", DbType="Char(7)")]
		public string OfficeID
		{
			get
			{
				return this._OfficeID;
			}
			set
			{
				if ((this._OfficeID != value))
				{
					if (this._Office.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfficeIDChanging(value);
					this.SendPropertyChanging();
					this._OfficeID = value;
					this.SendPropertyChanged("OfficeID");
					this.OnOfficeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Available_Tour_Taken_Tour", Storage="_Taken_Tours", ThisKey="TourID", OtherKey="TourID")]
		public EntitySet<Taken_Tour> Taken_Tours
		{
			get
			{
				return this._Taken_Tours;
			}
			set
			{
				this._Taken_Tours.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Available_Tour_DelayofTour", Storage="_DelayofTour", ThisKey="TourID", OtherKey="TourID", IsUnique=true, IsForeignKey=false)]
		public DelayofTour DelayofTour
		{
			get
			{
				return this._DelayofTour.Entity;
			}
			set
			{
				DelayofTour previousValue = this._DelayofTour.Entity;
				if (((previousValue != value) 
							|| (this._DelayofTour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DelayofTour.Entity = null;
						previousValue.Available_Tour = null;
					}
					this._DelayofTour.Entity = value;
					if ((value != null))
					{
						value.Available_Tour = this;
					}
					this.SendPropertyChanged("DelayofTour");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Available_Tour", Storage="_City", ThisKey="DestinationCityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Available_Tours.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Available_Tours.Add(this);
						this._DestinationCityID = value.CityID;
					}
					else
					{
						this._DestinationCityID = default(string);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Office_Available_Tour", Storage="_Office", ThisKey="OfficeID", OtherKey="OfficeID", IsForeignKey=true)]
		public Office Office
		{
			get
			{
				return this._Office.Entity;
			}
			set
			{
				Office previousValue = this._Office.Entity;
				if (((previousValue != value) 
							|| (this._Office.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Office.Entity = null;
						previousValue.Available_Tours.Remove(this);
					}
					this._Office.Entity = value;
					if ((value != null))
					{
						value.Available_Tours.Add(this);
						this._OfficeID = value.OfficeID;
					}
					else
					{
						this._OfficeID = default(string);
					}
					this.SendPropertyChanged("Office");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Available_Tour1", Storage="_City1", ThisKey="SourceCityID", OtherKey="CityID", IsForeignKey=true)]
		public City City1
		{
			get
			{
				return this._City1.Entity;
			}
			set
			{
				City previousValue = this._City1.Entity;
				if (((previousValue != value) 
							|| (this._City1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City1.Entity = null;
						previousValue.Available_Tours1.Remove(this);
					}
					this._City1.Entity = value;
					if ((value != null))
					{
						value.Available_Tours1.Add(this);
						this._SourceCityID = value.CityID;
					}
					else
					{
						this._SourceCityID = default(string);
					}
					this.SendPropertyChanged("City1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tour_Available_Tour", Storage="_Tour", ThisKey="Number,TourType", OtherKey="Number,TourType", IsForeignKey=true)]
		public Tour Tour
		{
			get
			{
				return this._Tour.Entity;
			}
			set
			{
				Tour previousValue = this._Tour.Entity;
				if (((previousValue != value) 
							|| (this._Tour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tour.Entity = null;
						previousValue.Available_Tours.Remove(this);
					}
					this._Tour.Entity = value;
					if ((value != null))
					{
						value.Available_Tours.Add(this);
						this._Number = value.Number;
						this._TourType = value.TourType;
					}
					else
					{
						this._Number = default(string);
						this._TourType = default(string);
					}
					this.SendPropertyChanged("Tour");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Taken_Tours(Taken_Tour entity)
		{
			this.SendPropertyChanging();
			entity.Available_Tour = this;
		}
		
		private void detach_Taken_Tours(Taken_Tour entity)
		{
			this.SendPropertyChanging();
			entity.Available_Tour = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DelayofTours")]
	public partial class DelayofTour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TourID;
		
		private System.Nullable<System.TimeSpan> _DelayatGoing;
		
		private System.Nullable<System.TimeSpan> _DelayatComingBack;
		
		private EntityRef<Available_Tour> _Available_Tour;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTourIDChanging(string value);
    partial void OnTourIDChanged();
    partial void OnDelayatGoingChanging(System.Nullable<System.TimeSpan> value);
    partial void OnDelayatGoingChanged();
    partial void OnDelayatComingBackChanging(System.Nullable<System.TimeSpan> value);
    partial void OnDelayatComingBackChanged();
    #endregion
		
		public DelayofTour()
		{
			this._Available_Tour = default(EntityRef<Available_Tour>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TourID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TourID
		{
			get
			{
				return this._TourID;
			}
			set
			{
				if ((this._TourID != value))
				{
					if (this._Available_Tour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTourIDChanging(value);
					this.SendPropertyChanging();
					this._TourID = value;
					this.SendPropertyChanged("TourID");
					this.OnTourIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelayatGoing", DbType="Time")]
		public System.Nullable<System.TimeSpan> DelayatGoing
		{
			get
			{
				return this._DelayatGoing;
			}
			set
			{
				if ((this._DelayatGoing != value))
				{
					this.OnDelayatGoingChanging(value);
					this.SendPropertyChanging();
					this._DelayatGoing = value;
					this.SendPropertyChanged("DelayatGoing");
					this.OnDelayatGoingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DelayatComingBack", DbType="Time")]
		public System.Nullable<System.TimeSpan> DelayatComingBack
		{
			get
			{
				return this._DelayatComingBack;
			}
			set
			{
				if ((this._DelayatComingBack != value))
				{
					this.OnDelayatComingBackChanging(value);
					this.SendPropertyChanging();
					this._DelayatComingBack = value;
					this.SendPropertyChanged("DelayatComingBack");
					this.OnDelayatComingBackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Available_Tour_DelayofTour", Storage="_Available_Tour", ThisKey="TourID", OtherKey="TourID", IsForeignKey=true)]
		public Available_Tour Available_Tour
		{
			get
			{
				return this._Available_Tour.Entity;
			}
			set
			{
				Available_Tour previousValue = this._Available_Tour.Entity;
				if (((previousValue != value) 
							|| (this._Available_Tour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Available_Tour.Entity = null;
						previousValue.DelayofTour = null;
					}
					this._Available_Tour.Entity = value;
					if ((value != null))
					{
						value.DelayofTour = this;
						this._TourID = value.TourID;
					}
					else
					{
						this._TourID = default(string);
					}
					this.SendPropertyChanged("Available_Tour");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
